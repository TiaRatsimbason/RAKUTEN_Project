Documentation de l'API de gestion de modèles et de prédictions

Introduction
Cette API permet d'importer des données, d'entraîner des modèles, de vérifier leur statut et d'effectuer des prédictions. Elle nécessite une authentification JWT pour accéder à certaines fonctionnalités.

Authentification
Pour utiliser l'API, une authentification par JSON Web Token (JWT) est nécessaire pour accéder aux endpoints protégés.

1. Authentification

Endpoint : /auth/login
- Méthode : POST
- Description : Permet à un utilisateur de se connecter et de récupérer un token JWT.
- Exemple de requête :
  curl -X POST "http://localhost:5000/auth/login" -H "Content-Type: application/json" -d '{"username": "admin", "password": "admin_pass"}'
- Paramètres du corps :
  - username : Nom d'utilisateur (obligatoire).
  - password : Mot de passe (obligatoire).
- Réponse :
  {
    "access_token": "eyJ0eXAiOiJKV1QiLCJhb..."
  }
- Note : Ce token devra être utilisé dans l'en-tête des requêtes pour les autres endpoints protégés.

2. Entraînement des modèles

Endpoint : /train
- Méthode : POST
- Description : Lance l'entraînement des modèles LSTM et VGG.
- Obligations : Cette route est protégée par JWT et requiert un utilisateur avec le rôle d'admin (voir users.json)
- Exemple de requête :
  curl -X POST "http://localhost:5000/train" -H "Authorization: Bearer <ACCESS_TOKEN>" (remplacer <ACCESS_TOKEN> par le token reçu)
- Réponse :
  {
    "message": "L'entraînement est en cours."
  }

Endpoint : /train/status
- Méthode : GET
- Description : Vérifie si un entraînement est en cours ou terminé.
- Obligations : Requiert un token JWT valide.
- Exemple de requête :
  curl -X GET "http://localhost:5000/train/status" -H "Authorization: Bearer <ACCESS_TOKEN>"
- Réponse :
  {
    "status": "Entraînement en cours"
  }

3. Prédictions

Endpoint : /api/predict
- Méthode : POST
- Description : Fait des prédictions en fonction des données fournies (CSV et images).
- Exemple de requête :
  curl -X POST "http://localhost:5000/api/predict" -H "Authorization: Bearer <ACCESS_TOKEN>" -F "file=@X_test_update.csv" -F "images_folder=./data/preprocessed/image_test"
- Paramètres :
  - file : Fichier CSV avec les données (obligatoire).
  - images_folder : Chemin vers les images (obligatoire).
- Réponse :
  {
    "predictions": {
      "0": "category1",
      "1": "category5"
    }
  }

4. Variables à modifier au besoin

Chemins d'accès
Si vous utilisez l'API localement ou en production, vérifiez les chemins d'accès vers les données et les modèles dans les fichiers suivants :

- import_raw_data.py :
  - raw_data_relative_path : Chemin vers le dossier où les données brutes sont stockées.
  - local_folder_path : Chemin vers les données prétraitées.
  
  Modifiez ces variables en fonction de l'emplacement de vos fichiers de données.

Modèles pré-entraînés : Les modèles doivent être disponibles dans le dossier models. Si les modèles n'existent pas, l'API les entraînera lors de son démarrage.

5. Notes techniques

Entraînement automatique lors du démarrage
L'API vérifie la présence des modèles au lancement. Si les fichiers modèles (best_lstm_model.h5 et best_vgg16_model.h5) ne sont pas présents, elle exécutera automatiquement l'installation des données et l'entraînement des modèles.

Gestion des erreurs
Les erreurs d'accès aux fichiers, de téléchargement ou de traitement des données sont loggées dans logs/training.log. Veuillez consulter ce fichier pour toute erreur pendant le fonctionnement de l'API.

Exemple de configuration
- Chemin des données brutes : C:/Users/Elsa/Documents/datascientest/projet_rakuten/juin24cmlops_rakuten_2/data/raw
- Chemin des modèles : C:/Users/Elsa/Documents/datascientest/projet_rakuten/juin24cmlops_rakuten_2/models
